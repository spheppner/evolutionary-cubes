# evolution 3d for Simon
import vpython
import random


# Press Umschalt+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.


# def print_hi(name):
#    # Use a breakpoint in the code line below to debug your script.
#    print(f'Hi, {name}')  # Press Strg+F8 to toggle the breakpoint.

class Game:
	scene1 = vpython.canvas(width=800, height=600, title='<center><h1>Swimmi CREATOR</h1></center>', autoscale=True, align="left")
	grid_size = 1  # should be 1 until we understand what it does
	fps = 60
	grid_dim = 2  # 1 = 1 cube, 2 = 2x2x2 cubes, 3=3x3x3 cubes...

	auto_rotate = False
	busy = False
	axis = None

	swimmiattributes = {}
	textwidgets = {}
	swimmidict = {}

class Swimmi(vpython.compound):
	number = 0

	cone_radius = 0.03  # for cone (body)
	cone_length = 0.17  # for cone (body)
	wing_height = 0.01  # for
	wing_to_cone_length = 1.0  # 1.0
	wing_to_cone_width = 0.4  # 0.4
	wing_to_cone_root = 0.2  # 0.2
	wing_angle = 15  # 15 (in degrees)

	def __init__(self, **kwargs):
		body = vpython.cone(pos=vpython.vector(0, 0, 0), axis=vpython.vector(Swimmi.cone_length, 0, 0),
							radius=Swimmi.cone_radius, visible=False)
		wing1 = vpython.box(pos=vpython.vector(Swimmi.cone_length * Swimmi.wing_to_cone_root, 0, 0), axis=body.axis,
							size=vpython.vector(Swimmi.cone_length * Swimmi.wing_to_cone_width,
												Swimmi.cone_length * Swimmi.wing_to_cone_length, Swimmi.wing_height), visible=False)
		wing1.rotate(vpython.radians(90-Swimmi.wing_angle), axis=body.axis)
		wing2 = vpython.box(pos=vpython.vector(Swimmi.cone_length * Swimmi.wing_to_cone_root, 0, 0), axis=body.axis,
							size=vpython.vector(Swimmi.cone_length * Swimmi.wing_to_cone_width,
												Swimmi.cone_length * Swimmi.wing_to_cone_length, Swimmi.wing_height), visible=False)
		wing2.rotate(vpython.radians(-90+Swimmi.wing_angle), axis=body.axis)

		super().__init__([body, wing1, wing2], **kwargs)
		self.visible = True

		self.number = Swimmi.number
		Swimmi.number += 1
		Game.swimmidict[self.number] = self

		self.angle = 0
		Game.axis = self.axis

	def update(self):
		if not Game.busy:
			Game.busy = True
			if Game.auto_rotate:
				self.rotate(angle=vpython.radians(15)*1/Game.fps, axis=self.up)
				Game.axis = self.axis
			Game.busy = False

def create_widgets():
	# Make new swimmi with button
	vpython.wtext(text="<br><br>       Cone Length:   ")
	Game.swimmiattributes["cone_length"] = vpython.slider(bind=cone_length_func, text="cone_length", min=0.01, max=0.3,
														  value=0.17).value
	Game.textwidgets["cone_length"] = vpython.wtext(text=Game.swimmiattributes["cone_length"])
	vpython.wtext(text="<br><br>       Cone Radius:   ")
	Game.swimmiattributes["cone_radius"] = vpython.slider(bind=cone_radius_func, text="cone_radius", min=0.01, max=0.3,
														  value=0.03).value
	Game.textwidgets["cone_radius"] = vpython.wtext(text=Game.swimmiattributes["cone_radius"])
	vpython.wtext(text="<br><br>       Wing Angle:   ")
	Game.swimmiattributes["wing_angle"] = vpython.slider(bind=wing_angle_func, text="wing_angle", min=5, max=45,
														 value=15).value
	Game.textwidgets["wing_angle"] = vpython.wtext(text=Game.swimmiattributes["wing_angle"])
	vpython.wtext(text="<br><br>       Wing Height:   ")
	Game.swimmiattributes["wing_height"] = vpython.slider(bind=wing_height_func, text="wing_height", min=0.01, max=0.05,
														  value=0.01).value
	Game.textwidgets["wing_height"] = vpython.wtext(text=Game.swimmiattributes["wing_height"])
	vpython.wtext(text="<br><br>       Wing to cone length:   ")
	Game.swimmiattributes["wing_to_cone_length"] = vpython.slider(bind=wing_to_cone_length_func,
																  text="wing_to_cone_length", min=0.1, max=1.5,
																  value=1.0).value
	Game.textwidgets["wing_to_cone_length"] = vpython.wtext(text=Game.swimmiattributes["wing_to_cone_length"])
	vpython.wtext(text="<br><br>       Wing to cone root:   ")
	Game.swimmiattributes["wing_to_cone_root"] = vpython.slider(bind=wing_to_cone_root_func, text="wing_to_cone_root",
																min=0.01, max=1, value=0.2).value
	Game.textwidgets["wing_to_cone_root"] = vpython.wtext(text=Game.swimmiattributes["wing_to_cone_root"])
	vpython.wtext(text="<br><br>       Wing to cone width:   ")
	Game.swimmiattributes["wing_to_cone_width"] = vpython.slider(bind=wing_to_cone_width_func,
																 text="wing_to_cone_width", min=0.1, max=0.8,
																 value=0.4).value
	Game.textwidgets["wing_to_cone_width"] = vpython.wtext(text=Game.swimmiattributes["wing_to_cone_width"])

	vpython.wtext(text="<br><br>       Auto Rotate:   ")
	vpython.checkbox(bind=toggle_auto_rotate, text='')

	Game.scene1.append_to_caption('\n\n')

def toggle_auto_rotate(check):
	Game.auto_rotate = check.checked

def cone_length_func(slide):
	Game.swimmiattributes["cone_length"] = slide.value
	Game.textwidgets["cone_length"].text = slide.value
	make_new_swimmi()

def cone_radius_func(slide):
	Game.swimmiattributes["cone_radius"] = slide.value
	Game.textwidgets["cone_radius"].text = slide.value
	make_new_swimmi()

def wing_angle_func(slide):
	Game.swimmiattributes["wing_angle"] = slide.value
	Game.textwidgets["wing_angle"].text = slide.value
	make_new_swimmi()

def wing_height_func(slide):
	Game.swimmiattributes["wing_height"] = slide.value
	Game.textwidgets["wing_height"].text = slide.value
	make_new_swimmi()

def wing_to_cone_length_func(slide):
	Game.swimmiattributes["wing_to_cone_length"] = slide.value
	Game.textwidgets["wing_to_cone_length"].text = slide.value
	make_new_swimmi()

def wing_to_cone_root_func(slide):
	Game.swimmiattributes["wing_to_cone_root"] = slide.value
	Game.textwidgets["wing_to_cone_root"].text = slide.value
	make_new_swimmi()

def wing_to_cone_width_func(slide):
	Game.swimmiattributes["wing_to_cone_width"] = slide.value
	Game.textwidgets["wing_to_cone_width"].text = slide.value
	make_new_swimmi()

def make_new_swimmi():
	if not Game.busy:
		Game.busy = True
		Swimmi.cone_length = Game.swimmiattributes["cone_length"]
		Swimmi.cone_radius = Game.swimmiattributes["cone_radius"]
		Swimmi.wing_angle = Game.swimmiattributes["wing_angle"]
		Swimmi.wing_height = Game.swimmiattributes["wing_height"]
		Swimmi.wing_to_cone_length = Game.swimmiattributes["wing_to_cone_length"]
		Swimmi.wing_to_cone_root = Game.swimmiattributes["wing_to_cone_root"]
		Swimmi.wing_to_cone_width = Game.swimmiattributes["wing_to_cone_width"]

		new = Swimmi(pos=vpython.vector(0, 0, 0), axis=Game.axis)

		killlist = []
		for s in Game.swimmidict.values():
			if s.number != new.number:
				s.visible = False
				killlist.append(s)
		for k in killlist:
			del Game.swimmidict[k.number]
			del k

		Game.busy = False




# ------------- end of widget functions ---------------------
def create_world():
	#xarrow = vpython.arrow(pos=vpython.vector(0, 0, 0), axis=vpython.vector(1, 0, 0), color=vpython.vector(1, 0, 0))  # red
	#yarrow = vpython.arrow(pos=vpython.vector(0, 0, 0), axis=vpython.vector(0, 1, 0), color=vpython.vector(0, 1, 0))  # green
	#zarrow = vpython.arrow(pos=vpython.vector(0, 0, 0), axis=vpython.vector(0, 0, 1), color=vpython.vector(0, 0, 1))  # blue
	#xlabel = vpython.label(pos=xarrow.pos + xarrow.axis, color=xarrow.color, text="x")
	#ylabel = vpython.label(pos=yarrow.pos + yarrow.axis, color=yarrow.color, text="y")
	#zlabel = vpython.label(pos=zarrow.pos + zarrow.axis, color=zarrow.color, text="z")

	Swimmi(pos=vpython.vector(0,0,0))
	Game.scene1.autoscale = False

def display():
	for swimmi in Game.swimmidict.values():
		swimmi.update()

def main():
	create_widgets()
	create_world()

	# update swimmies
	while True:
		vpython.rate(Game.fps)
		display()

if __name__ == '__main__':
	main()
